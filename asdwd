import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.StringTokenizer;

class Solution {
	static int N, M, result, tmp;
	static boolean canMake = false;
	// 상 우 하 좌
	static int[] di = { -1, 0, 1, 0 };
	static int[] dj = { 0, 1, 0, -1 };

	static int[][] map;
	static boolean[][] visited;

	public static void main(String args[]) throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st;

		int TC = Integer.parseInt(br.readLine());

		for (int tc = 1; tc <= TC; tc++) {
			// N: 높이 / M: 넓이
			st = new StringTokenizer(br.readLine());
			N = Integer.parseInt(st.nextToken());
			M = Integer.parseInt(st.nextToken());

			tmp = 0;
			result = Integer.MAX_VALUE;
			map = new int[N][M];

			for (int i = 0; i < N; i++) {
				st = new StringTokenizer(br.readLine());
				for (int j = 0; j < M; j++) {
					map[i][j] = Integer.parseInt(st.nextToken());
				}
				
			}

			visited = new boolean[N][M];
			visited[N-1][0] = true;
			
			dfs(N-1, 0, 1);
			System.out.println("#" + tc +" "+result);

		}
	}

	static void dfs(int i, int j, int h) {
		if(map[i][j] == 3) {
			canMake = true;
			result = Math.min(result, h);
			return;
		}
		
		for (int d = 0; d < 4; d++) {
			int ni = i + di[d];
			int nj = j + dj[d];
			
			int checkH = 1;
			
			if(d == 1 || d == 3) {
				if(0 <= ni && ni < N && 0 <= nj && nj < M && map[ni][nj] == 0) {
					continue;
				}
			}
			
			while(0 <= ni && ni < N && 0 <= nj && nj < M) {
				if(!visited[ni][nj] && map[ni][nj] != 0) {
					
					visited[ni][nj] = true;
					if(d == 0) {
						dfs(ni, nj, Math.max(h, checkH));
						visited[ni][nj] = false;
					}else {
						dfs(ni, nj, h);
						visited[ni][nj] = false;
					}
					break;
				}
				
				checkH += 1;
				ni += di[d];
				nj += dj[d];
			}
		}
		
	}
}
